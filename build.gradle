plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.0'
}

repositories {
    mavenCentral()
}

def allureVersion = "2.21.0",
    restAssuredVersion = "5.3.0",
    selenideVersion = "6.12.3",
    junitVersion = "5.9.2",
    slf4jVersion = "2.0.3",
    ownerVersion = "1.0.12"

allure
        {
            report {
                version.set(allureVersion)
            }
            adapter {

                aspectjWeaver.set(true)
                frameworks {
                    junit5 {
                        adapterVersion.set(allureVersion)
                    }
                }
            }
        }

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.seleniumhq.selenium:selenium-chrome-driver:4.8.1",
            "org.seleniumhq.selenium:selenium-java:4.8.1"
    )
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}